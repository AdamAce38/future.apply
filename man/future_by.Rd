% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/future_by.R
\name{future_by}
\alias{future_by}
\title{Apply a Function to a Data Frame Split by Factors via Futures}
\usage{
future_by(data, INDICES, FUN, ..., simplify = TRUE)
}
\arguments{
\item{data}{An \R object, normally a data frame, possibly a matrix.}

\item{INDICES}{A factor or a list of factors, each of length \code{nrow(data)}.}

\item{FUN}{a function to be applied to (usually data-frame) subsets of \code{data}.}

\item{simplify}{logical: see \link[base:tapply]{base::tapply}.}

\item{\ldots}{Additional arguments pass to \code{\link[=future_lapply]{future_lapply()}} and
then to \code{FUN()}.}
}
\value{
An object of class "by", giving the results for each subset.
This is always a list if simplify is false, otherwise a list
or array (see \link[base:tapply]{base::tapply}).
See also \code{\link[base:by]{base::by()}} for details.
}
\description{
Apply a Function to a Data Frame Split by Factors via Futures
}
\examples{
## ---------------------------------------------------------
## by()
## ---------------------------------------------------------
library(datasets) ## warpbreaks
library(stats)    ## lm()

y0 <- by(warpbreaks[, 1:2], warpbreaks[,"tension"], summary)
y1 <- by(warpbreaks[, 1],   warpbreaks[, -1],       summary)
y2 <- by(warpbreaks, warpbreaks[,"tension"],
         function(x) lm(breaks ~ wool, data = x))

## now suppose we want to extract the coefficients by group
tmp <- with(warpbreaks,
            by(warpbreaks, tension,
               function(x) lm(breaks ~ wool, data = x)))
y3 <- sapply(tmp, coef)


plan(multiprocess)

y0f <- future_by(warpbreaks[, 1:2], warpbreaks[,"tension"], summary)
y1f <- future_by(warpbreaks[, 1],   warpbreaks[, -1],       summary)
y2f <- future_by(warpbreaks, warpbreaks[,"tension"],
                 function(x) lm(breaks ~ wool, data = x))

## now suppose we want to extract the coefficients by group
tmp <- with(warpbreaks,
            future_by(warpbreaks, tension,
                      function(x) lm(breaks ~ wool, data = x)))
y3f <- sapply(tmp, coef)

stopifnot(all.equal(y0f, y0, check.attributes = FALSE))
stopifnot(all.equal(y1f, y1, check.attributes = FALSE))
stopifnot(all.equal(y2f, y2, check.attributes = FALSE))
stopifnot(all.equal(y3f, y3, check.attributes = FALSE))
}
